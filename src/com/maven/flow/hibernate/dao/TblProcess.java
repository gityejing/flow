package com.maven.flow.hibernate.dao;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.maven.flow.editor.adapter.impl.FlowCellInfo;
import com.maven.flow.editor.model.ApprovalProcessObject;
import com.maven.flow.editor.model.EndElement;
import com.maven.flow.editor.model.FlowElementObject;
import com.maven.flow.editor.model.HandleProcessObject;
import com.maven.flow.editor.model.KeyValueObject;
import com.maven.flow.editor.model.ProcessElementObject;
import com.maven.flow.editor.model.StartElement;
import com.maven.flow.service.IDService;

/**
 * TblProcess generated by MyEclipse Persistence Tools
 */

public class TblProcess implements java.io.Serializable {
	/**
	 * 路径解析规则：系统解析
	 */
	public static final int ROUTE_RULE_SYSTEM = 0;
	
	/**
	 * 路径解析规则：手动跳转
	 */
	public static final int ROUTE_RULE_CUSTOMIZE = 1;

	/**
	 * 步骤类型：开始步骤
	 */
	public static final int TYPE_START = -2;

	/**
	 * 步骤类型：结束步骤
	 */
	public static final int TYPE_END = -1;

	/**
	 * 步骤类型：处理类步骤
	 */
	public static final int TYPE_HANDLE = 1;

	/**
	 * 处理步骤：审批类步骤
	 */
	public static final int TYPE_APPROVAL = 2;

	/**
	 * 任务分解规则：默认规则
	 */
	public static final int SPLIT_RULE_DEFAULT = 0;

	/**
	 * 任务分解规则：自定义规则
	 */
	public static final int SPLIT_RULE_CUSTOMIZE = 1;

	/**
	 * 完成步骤规则：不需要检查
	 */
	public static final int COMPLETE_RULE_WITHOUTCHECK = 0;

	/**
	 * 完成步骤规则：需要检查
	 */
	public static final int COMPLETE_RULE_WITHCHECK = 1;

	/**
	 * 步骤文档目录权限规则：默认规则
	 */
	public static final int DOC_RULE_DEFAULT = 0;

	/**
	 * 步骤文档目录权限规则：自定义规则
	 */
	public static final int DOC_RULE_CUSTOMIZE = 1;
	
	// Fields
	
	private Integer processId;

	private Integer processType;

	private Integer appId;

	private String processName;

	private String processDesc;

	private String processDisplayText;

	private Integer processRouteRule;

	private Integer processJobSplitRule;

	private String processJobSplitCustomize;

	private Integer processCompleteCheckRule;

	private String processCompleteRuleCustomize;

	private Integer processDocFolderAccessRule;

	private String processPositionInfo;
	
	private Integer multiJobHandle;
	
	private Long parentProcessId;

	private Integer isWaitForSubFlow;

	private Integer ifcanSplitFlow;

	private Integer isfirstSubFlow;

	private String processState;

	private Integer splitType;

	private String splitProcessHandle;

	private Integer isSubFlowStep;

	private Integer innerStep;

	private Integer step;

	private Integer uniteStep;

	private String stepState;

	private String ViewURL;

	private String HandleURL;

	private BigDecimal left;

	private BigDecimal top;

	private BigDecimal width;

	private BigDecimal height;

	private List processAccesses = new ArrayList();// 步骤所有权限信息

	private List docFolders = new ArrayList();// 步骤的所有文档根目录

	private List docFolderAccess = new ArrayList();// 步骤的文档目录权限

	private IDService idservice = new IDService();
	
	private String proTest;
	
	
	private String isProcessAsynchronism="0";//是否是异步步骤。
	
	private String curProcessHandleMethod="2";//人的摆放方式。 1:相同步骤一人和一个步骤,步骤下人员打散。  2:步骤下的全部人集在同一步骤:步骤下人员集在一起
	
	private String processGroup;//步骤组.
	

	
	private String beforeHandleClass;//前置处理器;
	
	private String afterHandleClass;//后置处理器;
	
	private String processCode;//步骤编码
	
	private String isAgr="0";//是否对“拟同意”提供支持:::对拟同意提供支持，意味着可以在同一步骤里进行流转。
	
	
	private List accessRoles = new ArrayList();

	private List accessUsers = new ArrayList();

	private List projectRoles = new ArrayList();
	

	private List huiQianRoles = new ArrayList();	
	
	private TblAppRoute appRoute;
	
	
	// Constructors

	public TblProcess(Integer processId, Integer processType, Integer appId, String processName) {
		super();
		this.processId = processId;
		this.processType = processType;
		this.appId = appId;
		this.processName = processName;
	}

	public TblAppRoute getAppRoute() {
		return appRoute;
	}

	public void setAppRoute(TblAppRoute appRoute) {
		this.appRoute = appRoute;
	}

	public String getProTest() {
		return proTest;
	}

	public void setProTest(String proTest) {
		this.proTest = proTest;
	}

	/** default constructor */
	public TblProcess() {
	}

	/** minimal constructor */
	public TblProcess(Integer processId, Integer processType, Integer appId,
			String processName, Integer processRouteRule,
			Integer processJobSplitRule, Integer processCompleteCheckRule,
			Integer processDocFolderAccessRule) {
		this.processId = processId;
		this.processType = processType;
		this.appId = appId;
		this.processName = processName;
		this.processRouteRule = processRouteRule;
		this.processJobSplitRule = processJobSplitRule;
		this.processCompleteCheckRule = processCompleteCheckRule;
		this.processDocFolderAccessRule = processDocFolderAccessRule;
	}

	/** full constructor */
	public TblProcess(Integer processId, Integer processType, Integer appId,
			String processName, String processDesc, String processDisplayText,
			Integer processRouteRule, Integer processJobSplitRule,
			String processJobSplitCustomize, Integer processCompleteCheckRule,
			String processCompleteRuleCustomize,
			Integer processDocFolderAccessRule, String processPositionInfo,
			Integer multiJobHandle, Long parentProcessId,
			Integer isWaitForSubFlow, Integer ifcanSplitFlow,
			Integer isfirstSubFlow, String processState, Integer splitType,
			String splitProcessHandle, Integer isSubFlowStep,
			Integer innerStep, Integer step, Integer uniteStep, String stepState) {
		this.processId = processId;
		this.processType = processType;
		this.appId = appId;
		this.processName = processName;
		this.processDesc = processDesc;
		this.processDisplayText = processDisplayText;
		this.processRouteRule = processRouteRule;
		this.processJobSplitRule = processJobSplitRule;
		this.processJobSplitCustomize = processJobSplitCustomize;
		this.processCompleteCheckRule = processCompleteCheckRule;
		this.processCompleteRuleCustomize = processCompleteRuleCustomize;
		this.processDocFolderAccessRule = processDocFolderAccessRule;
		this.processPositionInfo = processPositionInfo;
		this.multiJobHandle = multiJobHandle;
		this.parentProcessId = parentProcessId;
		this.isWaitForSubFlow = isWaitForSubFlow;
		this.ifcanSplitFlow = ifcanSplitFlow;
		this.isfirstSubFlow = isfirstSubFlow;
		this.processState = processState;
		this.splitType = splitType;
		this.splitProcessHandle = splitProcessHandle;
		this.isSubFlowStep = isSubFlowStep;
		this.innerStep = innerStep;
		this.step = step;
		this.uniteStep = uniteStep;
		this.stepState = stepState;
	}

	// Property accessors

	public Integer getProcessId() {
		return this.processId;
	}

	public void setProcessId(Integer processId) {
		this.processId = processId;
	}

	public Integer getProcessType() {
		return this.processType;
	}

	public void setProcessType(Integer processType) {
		this.processType = processType;
	}

	public Integer getAppId() {
		return this.appId;
	}

	public void setAppId(Integer appId) {
		this.appId = appId;
	}

	public String getProcessName() {
		return this.processName;
	}

	public void setProcessName(String processName) {
		this.processName = processName;
	}

	public String getProcessDesc() {
		return this.processDesc;
	}

	public void setProcessDesc(String processDesc) {
		this.processDesc = processDesc;
	}

	public String getProcessDisplayText() {
		return this.processDisplayText;
	}

	public void setProcessDisplayText(String processDisplayText) {
		this.processDisplayText = processDisplayText;
	}

	public Integer getProcessRouteRule() {
		return this.processRouteRule;
	}

	public void setProcessRouteRule(Integer processRouteRule) {
		this.processRouteRule = processRouteRule;
	}

	public Integer getProcessJobSplitRule() {
		return this.processJobSplitRule;
	}

	public void setProcessJobSplitRule(Integer processJobSplitRule) {
		this.processJobSplitRule = processJobSplitRule;
	}

	public String getProcessJobSplitCustomize() {
		return this.processJobSplitCustomize;
	}

	public void setProcessJobSplitCustomize(String processJobSplitCustomize) {
		this.processJobSplitCustomize = processJobSplitCustomize;
	}

	public Integer getProcessCompleteCheckRule() {
		return this.processCompleteCheckRule;
	}

	public void setProcessCompleteCheckRule(Integer processCompleteCheckRule) {
		this.processCompleteCheckRule = processCompleteCheckRule;
	}

	public String getProcessCompleteRuleCustomize() {
		return this.processCompleteRuleCustomize;
	}

	public void setProcessCompleteRuleCustomize(
			String processCompleteRuleCustomize) {
		this.processCompleteRuleCustomize = processCompleteRuleCustomize;
	}

	public Integer getProcessDocFolderAccessRule() {
		return this.processDocFolderAccessRule;
	}

	public void setProcessDocFolderAccessRule(Integer processDocFolderAccessRule) {
		this.processDocFolderAccessRule = processDocFolderAccessRule;
	}

	public String getProcessPositionInfo() {
		return this.processPositionInfo;
	}

	public void setProcessPositionInfo(String processPositionInfo) {
		this.processPositionInfo = processPositionInfo;
	}

	public Integer getMultiJobHandle() {
		return multiJobHandle;
	}

	public void setMultiJobHandle(Integer multiJobHandle) {
		this.multiJobHandle = multiJobHandle;
	}

	public Long getParentProcessId() {
		return this.parentProcessId;
	}

	public void setParentProcessId(Long parentProcessId) {
		this.parentProcessId = parentProcessId;
	}

	public Integer getIsWaitForSubFlow() {
		return this.isWaitForSubFlow;
	}

	public void setIsWaitForSubFlow(Integer isWaitForSubFlow) {
		this.isWaitForSubFlow = isWaitForSubFlow;
	}

	public Integer getIfcanSplitFlow() {
		return this.ifcanSplitFlow;
	}

	public void setIfcanSplitFlow(Integer ifcanSplitFlow) {
		this.ifcanSplitFlow = ifcanSplitFlow;
	}

	public Integer getIsfirstSubFlow() {
		return this.isfirstSubFlow;
	}

	public void setIsfirstSubFlow(Integer isfirstSubFlow) {
		this.isfirstSubFlow = isfirstSubFlow;
	}

	public String getProcessState() {
		return this.processState;
	}

	public void setProcessState(String processState) {
		this.processState = processState;
	}

	public Integer getSplitType() {
		return this.splitType;
	}

	public void setSplitType(Integer splitType) {
		this.splitType = splitType;
	}

	public String getSplitProcessHandle() {
		return this.splitProcessHandle;
	}

	public void setSplitProcessHandle(String splitProcessHandle) {
		this.splitProcessHandle = splitProcessHandle;
	}

	public Integer getIsSubFlowStep() {
		return this.isSubFlowStep;
	}

	public void setIsSubFlowStep(Integer isSubFlowStep) {
		this.isSubFlowStep = isSubFlowStep;
	}

	public Integer getInnerStep() {
		return this.innerStep;
	}

	public void setInnerStep(Integer innerStep) {
		this.innerStep = innerStep;
	}

	public Integer getStep() {
		return this.step;
	}

	public void setStep(Integer step) {
		this.step = step;
	}

	public Integer getUniteStep() {
		return this.uniteStep;
	}

	public void setUniteStep(Integer uniteStep) {
		this.uniteStep = uniteStep;
	}

	public String getStepState() {
		return this.stepState;
	}

	public void setStepState(String stepState) {
		this.stepState = stepState;
	}

	public List getDocFolderAccess() {
		return docFolderAccess;
	}

	public void setDocFolderAccess(List docFolderAccess) {
		this.docFolderAccess = docFolderAccess;
	}

	public List getDocFolders() {
		return docFolders;
	}

	public void setDocFolders(List docFolders) {
		this.docFolders = docFolders;
	}

	public List getProcessAccesses() {
		return processAccesses;
	}

	public void setProcessAccesses(List processAccesses) {
		this.processAccesses = processAccesses;
	}

	public String getHandleURL() {
		return HandleURL;
	}

	public List getAccessRoles() {
		return accessRoles;
	}

	public void setAccessRoles(List accessRoles) {
		this.accessRoles = accessRoles;
	}

	public List getAccessUsers() {
		return accessUsers;
	}

	public void setAccessUsers(List accessUsers) {
		this.accessUsers = accessUsers;
	}

	public List getProjectRoles() {
		return projectRoles;
	}

	public List getHuiQianRoles() {
		return huiQianRoles;
	}

	public void setHuiQianRoles(List huiQianRoles) {
		this.huiQianRoles = huiQianRoles;
	}

	public void setProjectRoles(List projectRoles) {
		this.projectRoles = projectRoles;
	}

	public void setHandleURL(String handleURL) {
		HandleURL = handleURL;
	}

	public String getViewURL() {
		return ViewURL;
	}

	public void setViewURL(String viewURL) {
		ViewURL = viewURL;
	}

	public BigDecimal getHeight() {
		return height;
	}

	public void setHeight(BigDecimal height) {
		this.height = height;
	}

	public BigDecimal getLeft() {
		return left;
	}

	public void setLeft(BigDecimal left) {
		this.left = left;
	}

	public BigDecimal getTop() {
		return top;
	}

	public void setTop(BigDecimal top) {
		this.top = top;
	}

	public BigDecimal getWidth() {
		return width;
	}

	public void setWidth(BigDecimal width) {
		this.width = width;
	}

	
	public String getAfterHandleClass() {
		return afterHandleClass;
	}

	public void setAfterHandleClass(String afterHandleClass) {
		this.afterHandleClass = afterHandleClass;
	}

	public String getBeforeHandleClass() {
		return beforeHandleClass;
	}

	public void setBeforeHandleClass(String beforeHandleClass) {
		this.beforeHandleClass = beforeHandleClass;
	}

	public String getCurProcessHandleMethod() {
		return curProcessHandleMethod;
	}

	public void setCurProcessHandleMethod(String curProcessHandleMethod) {
		this.curProcessHandleMethod = curProcessHandleMethod;
	}

	public String getIsAgr() {
		return isAgr;
	}

	public void setIsAgr(String isAgr) {
		this.isAgr = isAgr;
	}

	public String getIsProcessAsynchronism() {
		return isProcessAsynchronism;
	}

	public void setIsProcessAsynchronism(String isProcessAsynchronism) {
		this.isProcessAsynchronism = isProcessAsynchronism;
	}

	public String getProcessCode() {
		return processCode;
	}

	public void setProcessCode(String processCode) {
		this.processCode = processCode;
	}

	public String getProcessGroup() {
		return processGroup;
	}

	public void setProcessGroup(String processGroup) {
		this.processGroup = processGroup;
	}

	public void assign(FlowCellInfo cellinfo) {

		this.setProcessName(cellinfo.getFlowObject().getName());
		this.setLeft(new BigDecimal(cellinfo.getX()));
		this.setTop(new BigDecimal(cellinfo.getY()));
		this.setWidth(new BigDecimal(cellinfo.getWidth()));
		this.setHeight(new BigDecimal(cellinfo.getHeight()));

		// this.setAppId(appId)

		FlowElementObject flowelementobject = (ProcessElementObject) cellinfo
				.getFlowObject();

		ProcessElementObject info = (ProcessElementObject) flowelementobject;
		
		if (info instanceof StartElement) {
			//
			StartElement startElementInfo = (StartElement) info;
			setProcessType(new Integer(TblProcess.TYPE_START));
			setHandleURL(startElementInfo.getHandlePageUrl());
			

		} else if (info instanceof HandleProcessObject) {
			HandleProcessObject procElementInfo = (HandleProcessObject) info;
			setProcessType(new Integer(TblProcess.TYPE_HANDLE));

			setViewURL(procElementInfo.getViewPageUrl());
			setHandleURL(procElementInfo.getHandlePageUrl());
			setMultiJobHandle(new Integer(procElementInfo.getMultiJobHandle()));
		} else if (info instanceof ApprovalProcessObject) {
			ApprovalProcessObject procElementInfo = (ApprovalProcessObject) info;
			setProcessType(new Integer(TblProcess.TYPE_APPROVAL));

			setViewURL(procElementInfo.getViewPageUrl());
			setHandleURL(procElementInfo.getHandlePageUrl());
			setMultiJobHandle(new Integer(procElementInfo.getMultiJobHandle()+""));

		} else if (info instanceof EndElement) {
			EndElement endElementInfo = (EndElement) info;
			setProcessType(new Integer(TblProcess.TYPE_END));
			
		}
		
		this.setProcessId(new Integer(info.getId()+""));
		
		// 处理基本信息
		setProcessCompleteCheckRule(new Integer(info.getCompleteRule()));
		setProcessCompleteRuleCustomize(info.getCustomizeCompleteRule());
		setProcessDesc(info.getDescription());
		setProcessDisplayText(info.getDisplayText());
		setProcessDocFolderAccessRule(new Integer(info.getDocFolder()));
		setProcessJobSplitCustomize(info.getCustomizeTaskRule());
		setProcessJobSplitRule(new Integer(info.getTaskRule()));
		setProcessName(info.getName());
		setProcessPositionInfo(info.getPositionUrl());
		setProcessRouteRule(new Integer(info.getRouteRule()));

		// 2008-08-13新加入的内容:
		setIsfirstSubFlow(new Integer(info.getIsfirstSubFlow()));
		setIsWaitForSubFlow(new Integer(info.getIsWaitForSubFlow()));
		setIfcanSplitFlow(new Integer(info.getIfcanSplitFlow()));
		setProcessState(info.getProcessState());
		
		setMultiJobHandle(new Integer(info.getMultiJobHandle()));
		
		// 2008-08-15新加入的内容.
		setSplitType(new Integer(info.getSplitType()));
		setSplitProcessHandle(info.getSplitProcessHandle());
		
		
		setIsSubFlowStep(new Integer(info.getIssubFlowStep()));

	
		setInnerStep(new Integer(info.getInnerStep()));

		
		setStep(new Integer(info.getStep()));
		setUniteStep(new Integer(info.getUniteStep()));

		
		setStepState(info.getStepState());
		
		this.setIsProcessAsynchronism(info.getIsProcessAsynchronism());
		this.setCurProcessHandleMethod(info.getCurProcessHandleMethod());
		this.setProcessGroup(info.getProcessGroup());
		this.setBeforeHandleClass(info.getBeforeHandleClass());
		this.setAfterHandleClass(info.getAfterHandleClass());
		this.setProcessCode(info.getProcessCode());
		this.setIsAgr(info.getIsAgr());
		
		//System.out.println("保存角色=================================================");
		//保存步骤-角色：
		if(info.getAccessRoles()!=null && info.getAccessRoles().size()>0){
			List roles=info.getAccessRoles();
			for(int i=0;i<roles.size();i++){
				KeyValueObject kvo=(KeyValueObject)roles.get(i);
				//Long  key=(Long)kvo.getKey();
				String value=kvo.getName();
				
				TblProcessPeople tpp=new TblProcessPeople();
				tpp.setPeopleType(new Integer(1));
				tpp.setProcessId(new Integer(info.getId()+""));
				tpp.setProcessName(info.getName());
				tpp.setRealFsn(kvo.getKey()+"");
				tpp.setRealValue(value);
				this.getAccessRoles().add(tpp);
				
				System.out.println("key========="+kvo.getKey()+",value==="+value);
			}
		}
		
		System.out.println("保存人员:::::::::::::::::::::::::::::::::::::::::");
		//保存步骤-人员：
		if(info.getAccessUsers()!=null && info.getAccessUsers().size()>0){
			List users=info.getAccessUsers();
			for(int i=0;i<users.size();i++){
				KeyValueObject kvo=(KeyValueObject)users.get(i);
				Long key=(Long)kvo.getKey();
				String value=kvo.getName();
				
				TblProcessPeople tpp=new TblProcessPeople();
				tpp.setPeopleType(new Integer(2+""));
				tpp.setProcessId(new Integer(info.getId()+""));
				tpp.setProcessName(info.getName());
				tpp.setRealFsn(key+"");
				tpp.setRealValue(value);
				this.getAccessRoles().add(tpp);
				System.out.println("key========="+key+",value==="+value);
			}
		}
		System.out.println("保存项目人员=================================================");
		//保存步骤-项目人员
		if(info.getProjectRoles()!=null && info.getProjectRoles().size()>0){
			List prs=info.getProjectRoles();
			for(int i=0;i<prs.size();i++){
				KeyValueObject kvo=(KeyValueObject)prs.get(i);
				Long key=(Long)kvo.getKey();
				String value=kvo.getName();
				
				TblProcessPeople tpp=new TblProcessPeople();
				tpp.setPeopleType(new Integer(3+""));
				tpp.setProcessId(new Integer(info.getId()));
				tpp.setProcessName(info.getName());
				tpp.setRealFsn(key+"");
				tpp.setRealValue(value);
				this.getAccessRoles().add(tpp);
				System.out.println("key========="+key+",value==="+value);
			}
		}
		
		System.out.println("processName==="+this.getProcessName()+",info.getHuiQianRoles()="+info.getHuiQianRoles().size());
		
		
		if(info.getHuiQianRoles()!=null && info.getHuiQianRoles().size()>0){
			List prs=info.getHuiQianRoles();
			for(int i=0;i<prs.size();i++){
				KeyValueObject kvo=(KeyValueObject)prs.get(i);
				Long key=(Long)kvo.getKey();
				String value=kvo.getName();
				TblProcessPeople tpp=new TblProcessPeople();
				tpp.setPeopleType(new Integer(4+""));
				tpp.setProcessId(new Integer(info.getId()));
				tpp.setProcessName(info.getName());
				tpp.setRealFsn(key+"");
				tpp.setRealValue(value);
				this.getAccessRoles().add(tpp);
			}
		}
		

	}
	public String toString()
	{
		return this.appId+":"+this.processId+":"+this.processName;
	}
}